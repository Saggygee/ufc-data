"""\nUFC Data Access Layer (DAL)\n==========================\n\nThis module provides high-level data access methods for the UFC database.\nIt includes CRUD operations, data validation, and specialized queries for\nprediction modeling and DraftKings integration.\n\"\"\"\n\nimport sqlite3\nfrom typing import Optional, List, Dict, Any, Tuple, Union\nfrom datetime import datetime, date\nimport json\nimport logging\nfrom database_schema import UFCDatabase\n\nlogger = logging.getLogger(__name__)\n\n\nclass UFCDataAccess:\n    \"\"\"High-level data access layer for UFC database operations.\"\"\"\n    \n    def __init__(self, db_path: str = \"ufc_data.db\"):\n        \"\"\"Initialize the data access layer.\"\"\"\n        self.db = UFCDatabase(db_path)\n    \n    def close(self):\n        \"\"\"Close database connection.\"\"\"\n        self.db.close()\n    \n    # ==================== FIGHTER OPERATIONS ====================\n    \n    def insert_fighter(self, name: str, height: Optional[float] = None, \n                      reach: Optional[float] = None, stance: Optional[str] = None,\n                      date_of_birth: Optional[str] = None) -> int:\n        \"\"\"Insert a new fighter and return the fighter_id.\"\"\"\n        query = \"\"\"\n        INSERT OR IGNORE INTO fighters (name, height, reach, stance, date_of_birth)\n        VALUES (?, ?, ?, ?, ?)\n        \"\"\"\n        cursor = self.db.execute_query(query, (name, height, reach, stance, date_of_birth))\n        self.db.commit()\n        \n        # Get the fighter_id\n        fighter_id = self.get_fighter_id_by_name(name)\n        if fighter_id is None:\n            raise ValueError(f\"Failed to insert or find fighter: {name}\")\n        \n        return fighter_id\n    \n    def get_fighter_id_by_name(self, name: str) -> Optional[int]:\n        \"\"\"Get fighter_id by name.\"\"\"\n        query = \"SELECT fighter_id FROM fighters WHERE name = ?\"\n        cursor = self.db.execute_query(query, (name,))\n        result = cursor.fetchone()\n        return result[0] if result else None\n    \n    def get_fighter_by_id(self, fighter_id: int) -> Optional[Dict]:\n        \"\"\"Get fighter information by ID.\"\"\"\n        query = \"SELECT * FROM fighters WHERE fighter_id = ?\"\n        cursor = self.db.execute_query(query, (fighter_id,))\n        result = cursor.fetchone()\n        return dict(result) if result else None\n    \n    def update_fighter_stats(self, fighter_id: int, **kwargs):\n        \"\"\"Update fighter information.\"\"\"\n        if not kwargs:\n            return\n        \n        set_clause = \", \".join([f\"{key} = ?\" for key in kwargs.keys()])\n        query = f\"UPDATE fighters SET {set_clause}, updated_at = CURRENT_TIMESTAMP WHERE fighter_id = ?\"\n        \n        values = list(kwargs.values()) + [fighter_id]\n        self.db.execute_query(query, tuple(values))\n        self.db.commit()\n    \n    # ==================== WEIGHT CLASS OPERATIONS ====================\n    \n    def insert_weight_class(self, name: str, weight_limit: Optional[float] = None,\n                           gender: str = 'Mixed') -> int:\n        \"\"\"Insert a new weight class and return the weight_class_id.\"\"\"\n        query = \"\"\"\n        INSERT OR IGNORE INTO weight_classes (name, weight_limit, gender)\n        VALUES (?, ?, ?)\n        \"\"\"\n        cursor = self.db.execute_query(query, (name, weight_limit, gender))\n        self.db.commit()\n        \n        # Get the weight_class_id\n        weight_class_id = self.get_weight_class_id_by_name(name)\n        if weight_class_id is None:\n            raise ValueError(f\"Failed to insert or find weight class: {name}\")\n        \n        return weight_class_id\n    \n    def get_weight_class_id_by_name(self, name: str) -> Optional[int]:\n        \"\"\"Get weight_class_id by name.\"\"\"\n        query = \"SELECT weight_class_id FROM weight_classes WHERE name = ?\"\n        cursor = self.db.execute_query(query, (name,))\n        result = cursor.fetchone()\n        return result[0] if result else None\n    \n    # ==================== EVENT OPERATIONS ====================\n    \n    def insert_event(self, name: str, date: str, location: Optional[str] = None,\n                    venue: Optional[str] = None) -> int:\n        \"\"\"Insert a new event and return the event_id.\"\"\"\n        query = \"\"\"\n        INSERT OR IGNORE INTO events (name, date, location, venue)\n        VALUES (?, ?, ?, ?)\n        \"\"\"\n        cursor = self.db.execute_query(query, (name, date, location, venue))\n        self.db.commit()\n        \n        # Get the event_id\n        event_id = self.get_event_id_by_name_and_date(name, date)\n        if event_id is None:\n            raise ValueError(f\"Failed to insert or find event: {name} on {date}\")\n        \n        return event_id\n    \n    def get_event_id_by_name_and_date(self, name: str, date: str) -> Optional[int]:\n        \"\"\"Get event_id by name and date.\"\"\"\n        query = \"SELECT event_id FROM events WHERE name = ? AND date = ?\"\n        cursor = self.db.execute_query(query, (name, date))\n        result = cursor.fetchone()\n        return result[0] if result else None\n    \n    def get_event_by_id(self, event_id: int) -> Optional[Dict]:\n        \"\"\"Get event information by ID.\"\"\"\n        query = \"SELECT * FROM events WHERE event_id = ?\"\n        cursor = self.db.execute_query(query, (event_id,))\n        result = cursor.fetchone()\n        return dict(result) if result else None\n    \n    # ==================== FIGHT OPERATIONS ====================\n    \n    def insert_fight(self, event_id: int, fighter1_id: int, fighter2_id: int,\n                    weight_class_id: int, outcome: Optional[str] = None,\n                    method: Optional[str] = None, round_num: Optional[int] = None,\n                    time: Optional[str] = None, referee: Optional[str] = None) -> int:\n        \"\"\"Insert a new fight and return the fight_id.\"\"\"\n        query = \"\"\"\n        INSERT OR IGNORE INTO fights \n        (event_id, fighter1_id, fighter2_id, weight_class_id, outcome, method, round, time, referee)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n        \"\"\"\n        cursor = self.db.execute_query(query, (\n            event_id, fighter1_id, fighter2_id, weight_class_id,\n            outcome, method, round_num, time, referee\n        ))\n        self.db.commit()\n        \n        # Get the fight_id\n        fight_id = self.get_fight_id(event_id, fighter1_id, fighter2_id)\n        if fight_id is None:\n            raise ValueError(f\"Failed to insert or find fight\")\n        \n        return fight_id\n    \n    def get_fight_id(self, event_id: int, fighter1_id: int, fighter2_id: int) -> Optional[int]:\n        \"\"\"Get fight_id by event and fighters.\"\"\"\n        query = \"\"\"\n        SELECT fight_id FROM fights \n        WHERE event_id = ? AND fighter1_id = ? AND fighter2_id = ?\n        \"\"\"\n        cursor = self.db.execute_query(query, (event_id, fighter1_id, fighter2_id))\n        result = cursor.fetchone()\n        return result[0] if result else None\n    \n    def get_fight_by_id(self, fight_id: int) -> Optional[Dict]:\n        \"\"\"Get fight information by ID with related data.\"\"\"\n        query = \"\"\"\n        SELECT f.*, e.name as event_name, e.date as event_date,\n               f1.name as fighter1_name, f2.name as fighter2_name,\n               wc.name as weight_class_name\n        FROM fights f\n        JOIN events e ON f.event_id = e.event_id\n        JOIN fighters f1 ON f.fighter1_id = f1.fighter_id\n        JOIN fighters f2 ON f.fighter2_id = f2.fighter_id\n        JOIN weight_classes wc ON f.weight_class_id = wc.weight_class_id\n        WHERE f.fight_id = ?\n        \"\"\"\n        cursor = self.db.execute_query(query, (fight_id,))\n        result = cursor.fetchone()\n        return dict(result) if result else None\n    \n    # ==================== FIGHTER STATS OPERATIONS ====================\n    \n    def insert_fighter_stats(self, fight_id: int, fighter_id: int, **stats) -> int:\n        \"\"\"Insert fighter stats for a specific fight.\"\"\"\n        base_fields = ['fight_id', 'fighter_id']\n        stat_fields = [\n            'current_weight', 'sig_strikes_landed_pm', 'sig_strikes_accuracy',\n            'sig_strikes_absorbed_pm', 'sig_strikes_defended', 'takedown_avg_per15m',\n            'takedown_accuracy', 'takedown_defence', 'submission_avg_attempted_per15m',\n            'wins', 'losses', 'draws', 'no_contests'\n        ]\n        \n        # Build the query dynamically based on provided stats\n        provided_fields = [field for field in stat_fields if field in stats]\n        all_fields = base_fields + provided_fields\n        placeholders = ', '.join(['?'] * len(all_fields))\n        \n        query = f\"\"\"\n        INSERT OR REPLACE INTO fighter_stats ({', '.join(all_fields)})\n        VALUES ({placeholders})\n        \"\"\"\n        \n        values = [fight_id, fighter_id] + [stats.get(field) for field in provided_fields]\n        cursor = self.db.execute_query(query, tuple(values))\n        self.db.commit()\n        \n        return cursor.lastrowid\n    \n    def get_fighter_stats_for_fight(self, fight_id: int, fighter_id: int) -> Optional[Dict]:\n        \"\"\"Get fighter stats for a specific fight.\"\"\"\n        query = \"SELECT * FROM fighter_stats WHERE fight_id = ? AND fighter_id = ?\"\n        cursor = self.db.execute_query(query, (fight_id, fighter_id))\n        result = cursor.fetchone()\n        return dict(result) if result else None\n    \n    # ==================== BETTING ODDS OPERATIONS ====================\n    \n    def insert_betting_odds(self, fight_id: int, favourite_fighter_id: Optional[int] = None,\n                           underdog_fighter_id: Optional[int] = None,\n                           favourite_odds: Optional[float] = None,\n                           underdog_odds: Optional[float] = None,\n                           betting_outcome: Optional[str] = None,\n                           bookmaker: str = 'betmma.tips',\n                           odds_date: Optional[str] = None) -> int:\n        \"\"\"Insert betting odds for a fight.\"\"\"\n        query = \"\"\"\n        INSERT INTO betting_odds \n        (fight_id, bookmaker, favourite_fighter_id, underdog_fighter_id,\n         favourite_odds, underdog_odds, betting_outcome, odds_date)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n        \"\"\"\n        cursor = self.db.execute_query(query, (\n            fight_id, bookmaker, favourite_fighter_id, underdog_fighter_id,\n            favourite_odds, underdog_odds, betting_outcome, odds_date\n        ))\n        self.db.commit()\n        \n        return cursor.lastrowid\n    \n    def get_betting_odds_for_fight(self, fight_id: int) -> List[Dict]:\n        \"\"\"Get all betting odds for a fight.\"\"\"\n        query = \"\"\"\n        SELECT bo.*, f1.name as favourite_name, f2.name as underdog_name\n        FROM betting_odds bo\n        LEFT JOIN fighters f1 ON bo.favourite_fighter_id = f1.fighter_id\n        LEFT JOIN fighters f2 ON bo.underdog_fighter_id = f2.fighter_id\n        WHERE bo.fight_id = ?\n        \"\"\"\n        cursor = self.db.execute_query(query, (fight_id,))\n        return [dict(row) for row in cursor.fetchall()]\n    \n    # ==================== PREDICTION MODEL OPERATIONS ====================\n    \n    def insert_prediction_model(self, model_name: str, model_type: str, version: str,\n                               accuracy: Optional[float] = None,\n                               precision_score: Optional[float] = None,\n                               recall_score: Optional[float] = None,\n                               f1_score: Optional[float] = None,\n                               training_data_size: Optional[int] = None,\n                               features_used: Optional[List[str]] = None,\n                               hyperparameters: Optional[Dict] = None,\n                               model_file_path: Optional[str] = None,\n                               is_active: bool = False) -> int:\n        \"\"\"Insert a new prediction model.\"\"\"\n        query = \"\"\"\n        INSERT INTO prediction_models \n        (model_name, model_type, version, accuracy, precision_score, recall_score,\n         f1_score, training_data_size, features_used, hyperparameters, \n         model_file_path, is_active)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        \"\"\"\n        \n        features_json = json.dumps(features_used) if features_used else None\n        hyperparams_json = json.dumps(hyperparameters) if hyperparameters else None\n        \n        cursor = self.db.execute_query(query, (\n            model_name, model_type, version, accuracy, precision_score, recall_score,\n            f1_score, training_data_size, features_json, hyperparams_json,\n            model_file_path, is_active\n        ))\n        self.db.commit()\n        \n        return cursor.lastrowid\n    \n    def get_active_model(self) -> Optional[Dict]:\n        \"\"\"Get the currently active prediction model.\"\"\"\n        query = \"SELECT * FROM prediction_models WHERE is_active = 1 LIMIT 1\"\n        cursor = self.db.execute_query(query)\n        result = cursor.fetchone()\n        return dict(result) if result else None\n    \n    def set_active_model(self, model_id: int):\n        \"\"\"Set a model as active (deactivates all others).\"\"\"\n        # Deactivate all models\n        self.db.execute_query(\"UPDATE prediction_models SET is_active = 0\")\n        # Activate the specified model\n        self.db.execute_query(\"UPDATE prediction_models SET is_active = 1 WHERE model_id = ?\", (model_id,))\n        self.db.commit()\n    \n    # ==================== PREDICTION OPERATIONS ====================\n    \n    def insert_prediction(self, model_id: int, fight_id: int,\n                         predicted_winner_id: Optional[int] = None,\n                         confidence_score: Optional[float] = None,\n                         prediction_probabilities: Optional[Dict] = None,\n                         features_used: Optional[Dict] = None) -> int:\n        \"\"\"Insert a new prediction.\"\"\"\n        query = \"\"\"\n        INSERT INTO predictions \n        (model_id, fight_id, predicted_winner_id, confidence_score,\n         prediction_probabilities, features_used)\n        VALUES (?, ?, ?, ?, ?, ?)\n        \"\"\"\n        \n        probs_json = json.dumps(prediction_probabilities) if prediction_probabilities else None\n        features_json = json.dumps(features_used) if features_used else None\n        \n        cursor = self.db.execute_query(query, (\n            model_id, fight_id, predicted_winner_id, confidence_score,\n            probs_json, features_json\n        ))\n        self.db.commit()\n        \n        return cursor.lastrowid\n    \n    def update_prediction_outcome(self, prediction_id: int, actual_outcome: str, is_correct: bool):\n        \"\"\"Update prediction with actual outcome.\"\"\"\n        query = \"\"\"\n        UPDATE predictions \n        SET actual_outcome = ?, is_correct = ?\n        WHERE prediction_id = ?\n        \"\"\"\n        self.db.execute_query(query, (actual_outcome, is_correct, prediction_id))\n        self.db.commit()\n    \n    # ==================== DRAFTKINGS OPERATIONS ====================\n    \n    def insert_draftkings_lineup(self, event_id: int, lineup_name: str,\n                                total_salary: int, projected_points: Optional[float] = None) -> int:\n        \"\"\"Insert a new DraftKings lineup.\"\"\"\n        query = \"\"\"\n        INSERT INTO draftkings_lineups \n        (event_id, lineup_name, total_salary, projected_points)\n        VALUES (?, ?, ?, ?)\n        \"\"\"\n        cursor = self.db.execute_query(query, (event_id, lineup_name, total_salary, projected_points))\n        self.db.commit()\n        \n        return cursor.lastrowid\n    \n    def insert_lineup_fighter(self, lineup_id: int, fighter_id: int, salary: int,\n                             projected_points: Optional[float] = None,\n                             position: str = 'Fighter') -> int:\n        \"\"\"Insert a fighter into a DraftKings lineup.\"\"\"\n        query = \"\"\"\n        INSERT INTO draftkings_lineup_fighters \n        (lineup_id, fighter_id, salary, projected_points, position)\n        VALUES (?, ?, ?, ?, ?)\n        \"\"\"\n        cursor = self.db.execute_query(query, (lineup_id, fighter_id, salary, projected_points, position))\n        self.db.commit()\n        \n        return cursor.lastrowid\n    \n    def get_lineup_with_fighters(self, lineup_id: int) -> Optional[Dict]:\n        \"\"\"Get a complete lineup with all fighters.\"\"\"\n        # Get lineup info\n        lineup_query = \"SELECT * FROM draftkings_lineups WHERE lineup_id = ?\"\n        cursor = self.db.execute_query(lineup_query, (lineup_id,))\n        lineup = cursor.fetchone()\n        \n        if not lineup:\n            return None\n        \n        # Get fighters in lineup\n        fighters_query = \"\"\"\n        SELECT dlf.*, f.name as fighter_name\n        FROM draftkings_lineup_fighters dlf\n        JOIN fighters f ON dlf.fighter_id = f.fighter_id\n        WHERE dlf.lineup_id = ?\n        \"\"\"\n        cursor = self.db.execute_query(fighters_query, (lineup_id,))\n        fighters = [dict(row) for row in cursor.fetchall()]\n        \n        result = dict(lineup)\n        result['fighters'] = fighters\n        return result\n    \n    # ==================== ANALYTICS AND REPORTING ====================\n    \n    def get_fighter_record(self, fighter_id: int) -> Dict:\n        \"\"\"Get a fighter's win/loss record.\"\"\"\n        query = \"\"\"\n        SELECT \n            COUNT(*) as total_fights,\n            SUM(CASE WHEN (fighter1_id = ? AND outcome = 'fighter1') OR \n                          (fighter2_id = ? AND outcome = 'fighter2') THEN 1 ELSE 0 END) as wins,\n            SUM(CASE WHEN (fighter1_id = ? AND outcome = 'fighter2') OR \n                          (fighter2_id = ? AND outcome = 'fighter1') THEN 1 ELSE 0 END) as losses,\n            SUM(CASE WHEN outcome = 'Draw' THEN 1 ELSE 0 END) as draws\n        FROM fights \n        WHERE fighter1_id = ? OR fighter2_id = ?\n        \"\"\"\n        cursor = self.db.execute_query(query, (fighter_id, fighter_id, fighter_id, fighter_id, fighter_id, fighter_id))\n        result = cursor.fetchone()\n        return dict(result) if result else {'total_fights': 0, 'wins': 0, 'losses': 0, 'draws': 0}\n    \n    def get_recent_fights(self, fighter_id: int, limit: int = 5) -> List[Dict]:\n        \"\"\"Get a fighter's recent fights.\"\"\"\n        query = \"\"\"\n        SELECT f.*, e.name as event_name, e.date as event_date,\n               f1.name as fighter1_name, f2.name as fighter2_name,\n               wc.name as weight_class_name\n        FROM fights f\n        JOIN events e ON f.event_id = e.event_id\n        JOIN fighters f1 ON f.fighter1_id = f1.fighter_id\n        JOIN fighters f2 ON f.fighter2_id = f2.fighter_id\n        JOIN weight_classes wc ON f.weight_class_id = wc.weight_class_id\n        WHERE f.fighter1_id = ? OR f.fighter2_id = ?\n        ORDER BY e.date DESC\n        LIMIT ?\n        \"\"\"\n        cursor = self.db.execute_query(query, (fighter_id, fighter_id, limit))\n        return [dict(row) for row in cursor.fetchall()]\n    \n    def get_model_performance_summary(self, model_id: int) -> Dict:\n        \"\"\"Get performance summary for a prediction model.\"\"\"\n        query = \"\"\"\n        SELECT \n            COUNT(*) as total_predictions,\n            SUM(CASE WHEN is_correct = 1 THEN 1 ELSE 0 END) as correct_predictions,\n            AVG(confidence_score) as avg_confidence,\n            MIN(prediction_date) as first_prediction,\n            MAX(prediction_date) as last_prediction\n        FROM predictions \n        WHERE model_id = ? AND actual_outcome IS NOT NULL\n        \"\"\"\n        cursor = self.db.execute_query(query, (model_id,))\n        result = cursor.fetchone()\n        \n        if result and result[0] > 0:\n            data = dict(result)\n            data['accuracy'] = data['correct_predictions'] / data['total_predictions'] if data['total_predictions'] > 0 else 0\n            return data\n        \n        return {'total_predictions': 0, 'correct_predictions': 0, 'accuracy': 0, 'avg_confidence': 0}\n    \n    def get_upcoming_events(self, days_ahead: int = 30) -> List[Dict]:\n        \"\"\"Get upcoming events within specified days.\"\"\"\n        query = \"\"\"\n        SELECT * FROM events \n        WHERE date >= date('now') AND date <= date('now', '+{} days')\n        ORDER BY date ASC\n        \"\"\".format(days_ahead)\n        cursor = self.db.execute_query(query)\n        return [dict(row) for row in cursor.fetchall()]\n\n\nif __name__ == \"__main__\":\n    # Test the data access layer\n    dal = UFCDataAccess(\"test_ufc.db\")\n    try:\n        # Test fighter insertion\n        fighter_id = dal.insert_fighter(\"Test Fighter\", height=72.0, reach=74.0, stance=\"Orthodox\")\n        print(f\"Inserted fighter with ID: {fighter_id}\")\n        \n        # Test fighter retrieval\n        fighter = dal.get_fighter_by_id(fighter_id)\n        print(f\"Retrieved fighter: {fighter}\")\n        \n    except Exception as e:\n        logger.error(f\"Error during testing: {e}\")\n    finally:\n        dal.close()\n