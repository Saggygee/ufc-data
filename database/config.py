"""\nUFC Database Configuration\n=========================\n\nConfiguration settings for the UFC database solution.\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\n# Database Configuration\nDATABASE_CONFIG = {\n    'default_db_path': 'ufc_data.db',\n    'backup_dir': 'backups',\n    'export_dir': 'exports',\n    'models_dir': 'models',\n    'logs_dir': 'logs'\n}\n\n# Data Migration Configuration\nMIGRATION_CONFIG = {\n    'batch_size': 1000,\n    'commit_frequency': 100,\n    'error_threshold': 0.05,  # 5% error rate threshold\n    'backup_before_migration': True\n}\n\n# Prediction Model Configuration\nMODEL_CONFIG = {\n    'default_features': [\n        'delta_wins', 'delta_win_pct', 'delta_finish_rate',\n        'delta_strikes_pm', 'delta_takedowns_pm',\n        'delta_takedown_acc', 'delta_takedown_def',\n        'favourite_odds', 'underdog_odds', 'odds_ratio'\n    ],\n    'min_training_fights': 3,\n    'validation_split': 0.2,\n    'test_split': 0.1\n}\n\n# DraftKings Configuration\nDRAFTKINGS_CONFIG = {\n    'salary_cap': 50000,\n    'roster_size': 6,\n    'position_limits': {\n        'Fighter': 6\n    },\n    'min_salary_per_fighter': 6000,\n    'max_salary_per_fighter': 12000\n}\n\n# Analytics Configuration\nANALYTICS_CONFIG = {\n    'recent_fights_window': 5,\n    'ranking_min_fights': 3,\n    'performance_metrics': [\n        'win_percentage', 'finish_rate', 'avg_strikes_pm',\n        'avg_takedowns_pm', 'recent_form'\n    ]\n}\n\n# Logging Configuration\nLOGGING_CONFIG = {\n    'level': 'INFO',\n    'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    'file_handler': True,\n    'console_handler': True,\n    'max_file_size': 10 * 1024 * 1024,  # 10MB\n    'backup_count': 5\n}\n\n# Data Quality Configuration\nDATA_QUALITY_CONFIG = {\n    'required_fighter_fields': ['name'],\n    'required_fight_fields': ['event_id', 'fighter1_id', 'fighter2_id', 'weight_class_id'],\n    'required_event_fields': ['name', 'date'],\n    'max_height_inches': 84,  # 7 feet\n    'min_height_inches': 60,  # 5 feet\n    'max_reach_inches': 90,\n    'min_reach_inches': 60,\n    'max_odds': 50.0,\n    'min_odds': 1.01\n}\n\ndef ensure_directories():\n    \"\"\"Ensure all required directories exist.\"\"\"\n    for dir_name in DATABASE_CONFIG.values():\n        if isinstance(dir_name, str) and dir_name.endswith('_dir'):\n            Path(dir_name).mkdir(exist_ok=True)\n\ndef get_db_path(db_name: str = None) -> str:\n    \"\"\"Get the full database path.\"\"\"\n    if db_name is None:\n        db_name = DATABASE_CONFIG['default_db_path']\n    return str(Path(db_name).resolve())\n\ndef get_backup_path(db_name: str = None) -> str:\n    \"\"\"Get backup file path with timestamp.\"\"\"\n    from datetime import datetime\n    if db_name is None:\n        db_name = DATABASE_CONFIG['default_db_path']\n    \n    backup_dir = Path(DATABASE_CONFIG['backup_dir'])\n    backup_dir.mkdir(exist_ok=True)\n    \n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    backup_name = f\"{Path(db_name).stem}_backup_{timestamp}.db\"\n    \n    return str(backup_dir / backup_name)\n\ndef get_export_path(filename: str) -> str:\n    \"\"\"Get export file path.\"\"\"\n    export_dir = Path(DATABASE_CONFIG['export_dir'])\n    export_dir.mkdir(exist_ok=True)\n    return str(export_dir / filename)\n\ndef get_model_path(model_name: str) -> str:\n    \"\"\"Get model file path.\"\"\"\n    models_dir = Path(DATABASE_CONFIG['models_dir'])\n    models_dir.mkdir(exist_ok=True)\n    return str(models_dir / f\"{model_name}.pkl\")\n\ndef get_log_path(log_name: str) -> str:\n    \"\"\"Get log file path.\"\"\"\n    logs_dir = Path(DATABASE_CONFIG['logs_dir'])\n    logs_dir.mkdir(exist_ok=True)\n    return str(logs_dir / f\"{log_name}.log\")\n\n# Initialize directories on import\nensure_directories()\n