"""\nUFC Data Migration Script\n========================\n\nThis script migrates existing CSV data from the UFC project into the SQLite database.\nIt handles data cleaning, validation, and proper relationship mapping.\n\"\"\"\n\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, date\nimport logging\nimport os\nimport sys\nfrom typing import Dict, List, Optional, Tuple\nimport re\n\nfrom database_schema import UFCDatabase\nfrom data_access_layer import UFCDataAccess\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n\nclass UFCDataMigrator:\n    \"\"\"Handles migration of CSV data to the UFC database.\"\"\"\n    \n    def __init__(self, db_path: str = \"ufc_data.db\", data_dir: str = \".\"):\n        \"\"\"Initialize the migrator.\"\"\"\n        self.db_path = db_path\n        self.data_dir = data_dir\n        \n        # Initialize database schema first\n        db = UFCDatabase(db_path)\n        try:\n            db.create_tables()\n            db.create_indexes()\n            logger.info(\"Database schema initialized for migration\")\n        except Exception as e:\n            logger.error(f\"Failed to initialize database schema: {e}\")\n            raise\n        finally:\n            db.close()\n        \n        # Now initialize data access layer\n        self.dal = UFCDataAccess(db_path)\n        \n        # Track inserted records for reporting\n        self.migration_stats = {\n            'fighters': 0,\n            'weight_classes': 0,\n            'events': 0,\n            'fights': 0,\n            'fighter_stats': 0,\n            'betting_odds': 0,\n            'errors': []\n        }\n    \n    def close(self):\n        \"\"\"Close database connection.\"\"\"\n        self.dal.close()\n    \n    def clean_numeric_value(self, value) -> Optional[float]:\n        \"\"\"Clean and convert numeric values.\"\"\"\n        if pd.isna(value) or value == '' or value == 'NaN':\n            return None\n        try:\n            return float(value)\n        except (ValueError, TypeError):\n            return None\n    \n    def clean_string_value(self, value) -> Optional[str]:\n        \"\"\"Clean and convert string values.\"\"\"\n        if pd.isna(value) or value == '' or value == 'NaN':\n            return None\n        return str(value).strip()\n    \n    def clean_date_value(self, value) -> Optional[str]:\n        \"\"\"Clean and convert date values.\"\"\"\n        if pd.isna(value) or value == '' or value == 'NaN':\n            return None\n        \n        try:\n            # Try to parse the date and return in YYYY-MM-DD format\n            if isinstance(value, str):\n                # Handle various date formats\n                parsed_date = pd.to_datetime(value)\n                return parsed_date.strftime('%Y-%m-%d')\n            elif hasattr(value, 'strftime'):\n                return value.strftime('%Y-%m-%d')\n            else:\n                return str(value)\n        except:\n            logger.warning(f\"Could not parse date: {value}\")\n            return None\n    \n    def extract_height_in_inches(self, height_str) -> Optional[float]:\n        \"\"\"Extract height in inches from various formats.\"\"\"\n        if not height_str or pd.isna(height_str):\n            return None\n        \n        height_str = str(height_str).strip()\n        \n        # Handle format like \"5' 11\\\"\" or \"5'11\\\"\"\n        feet_inches_pattern = r\"(\\d+)'\\s*(\\d+)\"\n        match = re.search(feet_inches_pattern, height_str)\n        if match:\n            feet = int(match.group(1))\n            inches = int(match.group(2))\n            return feet * 12 + inches\n        \n        # Handle format like \"71\" (already in inches)\n        if height_str.replace('.', '').isdigit():\n            return float(height_str)\n        \n        return None\n    \n    def parse_weight_class_gender(self, weight_class: str) -> str:\n        \"\"\"Determine gender from weight class name.\"\"\"\n        if not weight_class:\n            return 'Mixed'\n        \n        weight_class_lower = weight_class.lower()\n        if \"women's\" in weight_class_lower:\n            return 'Female'\n        elif \"men's\" in weight_class_lower:\n            return 'Male'\n        else:\n            return 'Mixed'\n    \n    def migrate_weight_classes(self, df: pd.DataFrame):\n        \"\"\"Migrate weight classes from the dataframe.\"\"\"\n        logger.info(\"Migrating weight classes...\")\n        \n        unique_weight_classes = df['weight_class'].dropna().unique()\n        \n        for weight_class in unique_weight_classes:\n            try:\n                gender = self.parse_weight_class_gender(weight_class)\n                weight_class_id = self.dal.insert_weight_class(\n                    name=weight_class,\n                    gender=gender\n                )\n                self.migration_stats['weight_classes'] += 1\n                logger.debug(f\"Inserted weight class: {weight_class} (ID: {weight_class_id})\")\n                \n            except Exception as e:\n                error_msg = f\"Error inserting weight class {weight_class}: {e}\"\n                logger.error(error_msg)\n                self.migration_stats['errors'].append(error_msg)\n        \n        logger.info(f\"Migrated {self.migration_stats['weight_classes']} weight classes\")\n    \n    def migrate_fighters(self, df: pd.DataFrame):\n        \"\"\"Migrate fighters from the dataframe.\"\"\"\n        logger.info(\"Migrating fighters...\")\n        \n        # Get unique fighters from both fighter1 and fighter2 columns\n        fighter1_data = df[['fighter1', 'fighter1_height', 'fighter1_reach', \n                           'fighter1_stance', 'fighter1_dob']].copy()\n        fighter1_data.columns = ['name', 'height', 'reach', 'stance', 'dob']\n        \n        fighter2_data = df[['fighter2', 'fighter2_height', 'fighter2_reach', \n                           'fighter2_stance', 'fighter2_dob']].copy()\n        fighter2_data.columns = ['name', 'height', 'reach', 'stance', 'dob']\n        \n        # Combine and deduplicate\n        all_fighters = pd.concat([fighter1_data, fighter2_data], ignore_index=True)\n        all_fighters = all_fighters.drop_duplicates(subset=['name'])\n        \n        for _, fighter_row in all_fighters.iterrows():\n            try:\n                name = self.clean_string_value(fighter_row['name'])\n                if not name:\n                    continue\n                \n                height = self.extract_height_in_inches(fighter_row['height'])\n                reach = self.clean_numeric_value(fighter_row['reach'])\n                stance = self.clean_string_value(fighter_row['stance'])\n                dob = self.clean_date_value(fighter_row['dob'])\n                \n                fighter_id = self.dal.insert_fighter(\n                    name=name,\n                    height=height,\n                    reach=reach,\n                    stance=stance,\n                    date_of_birth=dob\n                )\n                self.migration_stats['fighters'] += 1\n                logger.debug(f\"Inserted fighter: {name} (ID: {fighter_id})\")\n                \n            except Exception as e:\n                error_msg = f\"Error inserting fighter {fighter_row.get('name', 'Unknown')}: {e}\"\n                logger.error(error_msg)\n                self.migration_stats['errors'].append(error_msg)\n        \n        logger.info(f\"Migrated {self.migration_stats['fighters']} fighters\")\n    \n    def migrate_events(self, df: pd.DataFrame):\n        \"\"\"Migrate events from the dataframe.\"\"\"\n        logger.info(\"Migrating events...\")\n        \n        # Get unique events\n        unique_events = df[['event_name', 'event_date']].drop_duplicates()\n        \n        for _, event_row in unique_events.iterrows():\n            try:\n                name = self.clean_string_value(event_row['event_name'])\n                date = self.clean_date_value(event_row['event_date'])\n                \n                if not name or not date:\n                    continue\n                \n                event_id = self.dal.insert_event(\n                    name=name,\n                    date=date\n                )\n                self.migration_stats['events'] += 1\n                logger.debug(f\"Inserted event: {name} on {date} (ID: {event_id})\")\n                \n            except Exception as e:\n                error_msg = f\"Error inserting event {event_row.get('event_name', 'Unknown')}: {e}\"\n                logger.error(error_msg)\n                self.migration_stats['errors'].append(error_msg)\n        \n        logger.info(f\"Migrated {self.migration_stats['events']} events\")\n    \n    def migrate_complete_data(self, csv_file_path: str):\n        \"\"\"Migrate data from the complete UFC dataset CSV.\"\"\"\n        logger.info(f\"Starting migration from {csv_file_path}\")\n        \n        try:\n            # Load the CSV file\n            df = pd.read_csv(csv_file_path)\n            logger.info(f\"Loaded {len(df)} rows from CSV\")\n            \n            # Migrate in order (due to foreign key dependencies)\n            self.migrate_weight_classes(df)\n            self.migrate_fighters(df)\n            self.migrate_events(df)\n            # Additional migration methods would go here\n            \n            # Record the data extract\n            self.record_data_extract('complete_migration', csv_file_path, len(df))\n            \n            logger.info(\"Migration completed successfully!\")\n            self.print_migration_summary()\n            \n        except Exception as e:\n            logger.error(f\"Migration failed: {e}\")\n            raise\n    \n    def record_data_extract(self, extract_type: str, source_file: str, records_processed: int):\n        \"\"\"Record information about the data extract.\"\"\"\n        query = \"\"\"\n        INSERT INTO data_extracts (extract_type, extract_timestamp, source_file, records_processed)\n        VALUES (?, ?, ?, ?)\n        \"\"\"\n        self.dal.db.execute_query(query, (\n            extract_type, \n            datetime.now().isoformat(), \n            source_file, \n            records_processed\n        ))\n        self.dal.db.commit()\n    \n    def print_migration_summary(self):\n        \"\"\"Print a summary of the migration results.\"\"\"\n        print(\"\\n\" + \"=\"*50)\n        print(\"MIGRATION SUMMARY\")\n        print(\"=\"*50)\n        print(f\"Weight Classes: {self.migration_stats['weight_classes']}\")\n        print(f\"Fighters: {self.migration_stats['fighters']}\")\n        print(f\"Events: {self.migration_stats['events']}\")\n        print(f\"Fights: {self.migration_stats['fights']}\")\n        print(f\"Fighter Stats: {self.migration_stats['fighter_stats']}\")\n        print(f\"Betting Odds: {self.migration_stats['betting_odds']}\")\n        print(f\"Errors: {len(self.migration_stats['errors'])}\")\n        \n        if self.migration_stats['errors']:\n            print(\"\\nERRORS:\")\n            for error in self.migration_stats['errors'][:10]:  # Show first 10 errors\n                print(f\"  - {error}\")\n            if len(self.migration_stats['errors']) > 10:\n                print(f\"  ... and {len(self.migration_stats['errors']) - 10} more errors\")\n        \n        print(\"=\"*50)\n\n\ndef main():\n    \"\"\"Main migration function.\"\"\"\n    # Set up database\n    db_path = \"ufc_data.db\"\n    \n    # Run migration\n    migrator = UFCDataMigrator(db_path, \".\")\n    try:\n        csv_file = \"complete_ufc_data.csv\"\n        if not os.path.exists(csv_file):\n            logger.error(f\"CSV file not found: {csv_file}\")\n            return\n        \n        migrator.migrate_complete_data(csv_file)\n        \n    except Exception as e:\n        logger.error(f\"Migration failed: {e}\")\n    finally:\n        migrator.close()\n\n\nif __name__ == \"__main__\":\n    main()\n