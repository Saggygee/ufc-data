"""\nUFC Database Schema Definition\n============================\n\nThis module defines the SQLite database schema for the UFC data project.\nThe schema is designed to normalize the data and support efficient queries\nfor prediction modeling and DraftKings integration.\n\"\"\"\n\nimport sqlite3\nfrom datetime import datetime\nfrom typing import Optional, List, Dict, Any\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\nclass UFCDatabase:\n    \"\"\"Main database class for UFC data management.\"\"\"\n    \n    def __init__(self, db_path: str = \"ufc_data.db\"):\n        \"\"\"Initialize the database connection.\"\"\"\n        self.db_path = db_path\n        self.connection = None\n        self.connect()\n    \n    def connect(self):\n        \"\"\"Establish database connection.\"\"\"\n        try:\n            self.connection = sqlite3.connect(self.db_path)\n            self.connection.row_factory = sqlite3.Row  # Enable dict-like access\n            logger.info(f\"Connected to database: {self.db_path}\")\n        except sqlite3.Error as e:\n            logger.error(f\"Error connecting to database: {e}\")\n            raise\n    \n    def close(self):\n        \"\"\"Close database connection.\"\"\"\n        if self.connection:\n            self.connection.close()\n            logger.info(\"Database connection closed\")\n    \n    def execute_query(self, query: str, params: tuple = None) -> sqlite3.Cursor:\n        \"\"\"Execute a query with optional parameters.\"\"\"\n        try:\n            cursor = self.connection.cursor()\n            if params:\n                cursor.execute(query, params)\n            else:\n                cursor.execute(query)\n            return cursor\n        except sqlite3.Error as e:\n            logger.error(f\"Error executing query: {e}\")\n            logger.error(f\"Query: {query}\")\n            raise\n    \n    def execute_many(self, query: str, params_list: List[tuple]) -> sqlite3.Cursor:\n        \"\"\"Execute a query with multiple parameter sets.\"\"\"\n        try:\n            cursor = self.connection.cursor()\n            cursor.executemany(query, params_list)\n            return cursor\n        except sqlite3.Error as e:\n            logger.error(f\"Error executing batch query: {e}\")\n            raise\n    \n    def commit(self):\n        \"\"\"Commit current transaction.\"\"\"\n        self.connection.commit()\n    \n    def rollback(self):\n        \"\"\"Rollback current transaction.\"\"\"\n        self.connection.rollback()\n    \n    def create_tables(self):\n        \"\"\"Create all database tables with proper schema.\"\"\"\n        \n        # Enable foreign key constraints\n        self.execute_query(\"PRAGMA foreign_keys = ON\")\n        \n        # Create fighters table\n        fighters_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS fighters (\n            fighter_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL UNIQUE,\n            height REAL,\n            reach REAL,\n            stance TEXT,\n            date_of_birth DATE,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n        \"\"\"\n        \n        # Create weight_classes table\n        weight_classes_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS weight_classes (\n            weight_class_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL UNIQUE,\n            weight_limit REAL,\n            gender TEXT CHECK(gender IN ('Male', 'Female', 'Mixed')),\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n        \"\"\"\n        \n        # Create events table\n        events_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS events (\n            event_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            date DATE NOT NULL,\n            location TEXT,\n            venue TEXT,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            UNIQUE(name, date)\n        )\n        \"\"\"\n        \n        # Create fights table\n        fights_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS fights (\n            fight_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            event_id INTEGER NOT NULL,\n            fighter1_id INTEGER NOT NULL,\n            fighter2_id INTEGER NOT NULL,\n            weight_class_id INTEGER NOT NULL,\n            outcome TEXT CHECK(outcome IN ('fighter1', 'fighter2', 'Draw', 'No Contest')),\n            method TEXT,\n            round INTEGER,\n            time TEXT,\n            referee TEXT,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (event_id) REFERENCES events(event_id),\n            FOREIGN KEY (fighter1_id) REFERENCES fighters(fighter_id),\n            FOREIGN KEY (fighter2_id) REFERENCES fighters(fighter_id),\n            FOREIGN KEY (weight_class_id) REFERENCES weight_classes(weight_class_id),\n            UNIQUE(event_id, fighter1_id, fighter2_id)\n        )\n        \"\"\"\n        \n        # Create fighter_stats table (historical stats at time of fight)\n        fighter_stats_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS fighter_stats (\n            stat_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            fight_id INTEGER NOT NULL,\n            fighter_id INTEGER NOT NULL,\n            current_weight REAL,\n            sig_strikes_landed_pm REAL,\n            sig_strikes_accuracy REAL,\n            sig_strikes_absorbed_pm REAL,\n            sig_strikes_defended REAL,\n            takedown_avg_per15m REAL,\n            takedown_accuracy REAL,\n            takedown_defence REAL,\n            submission_avg_attempted_per15m REAL,\n            wins INTEGER DEFAULT 0,\n            losses INTEGER DEFAULT 0,\n            draws INTEGER DEFAULT 0,\n            no_contests INTEGER DEFAULT 0,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (fight_id) REFERENCES fights(fight_id),\n            FOREIGN KEY (fighter_id) REFERENCES fighters(fighter_id),\n            UNIQUE(fight_id, fighter_id)\n        )\n        \"\"\"\n        \n        # Create betting_odds table\n        betting_odds_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS betting_odds (\n            odds_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            fight_id INTEGER NOT NULL,\n            bookmaker TEXT DEFAULT 'betmma.tips',\n            favourite_fighter_id INTEGER,\n            underdog_fighter_id INTEGER,\n            favourite_odds REAL,\n            underdog_odds REAL,\n            betting_outcome TEXT CHECK(betting_outcome IN ('favourite', 'underdog', 'Draw')),\n            odds_date TIMESTAMP,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (fight_id) REFERENCES fights(fight_id),\n            FOREIGN KEY (favourite_fighter_id) REFERENCES fighters(fighter_id),\n            FOREIGN KEY (underdog_fighter_id) REFERENCES fighters(fighter_id)\n        )\n        \"\"\"\n        \n        # Create data_extracts table for tracking data sources\n        data_extracts_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS data_extracts (\n            extract_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            extract_type TEXT NOT NULL CHECK(extract_type IN ('events', 'fighters', 'odds', 'complete_migration')),\n            extract_timestamp TIMESTAMP NOT NULL,\n            source_file TEXT,\n            records_processed INTEGER DEFAULT 0,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n        \"\"\"\n        \n        # Create prediction_models table for ML model tracking\n        prediction_models_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS prediction_models (\n            model_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            model_name TEXT NOT NULL,\n            model_type TEXT NOT NULL,\n            version TEXT NOT NULL,\n            accuracy REAL,\n            precision_score REAL,\n            recall_score REAL,\n            f1_score REAL,\n            training_data_size INTEGER,\n            features_used TEXT, -- JSON string of feature names\n            hyperparameters TEXT, -- JSON string of hyperparameters\n            model_file_path TEXT,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            is_active BOOLEAN DEFAULT FALSE,\n            UNIQUE(model_name, version)\n        )\n        \"\"\"\n        \n        # Create predictions table for storing model predictions\n        predictions_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS predictions (\n            prediction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            model_id INTEGER NOT NULL,\n            fight_id INTEGER NOT NULL,\n            predicted_winner_id INTEGER,\n            confidence_score REAL,\n            prediction_probabilities TEXT, -- JSON string with probabilities\n            features_used TEXT, -- JSON string of feature values used\n            prediction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            actual_outcome TEXT,\n            is_correct BOOLEAN,\n            FOREIGN KEY (model_id) REFERENCES prediction_models(model_id),\n            FOREIGN KEY (fight_id) REFERENCES fights(fight_id),\n            FOREIGN KEY (predicted_winner_id) REFERENCES fighters(fighter_id)\n        )\n        \"\"\"\n        \n        # Create draftkings_lineups table for fantasy lineups\n        draftkings_lineups_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS draftkings_lineups (\n            lineup_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            event_id INTEGER NOT NULL,\n            lineup_name TEXT NOT NULL,\n            total_salary INTEGER,\n            projected_points REAL,\n            actual_points REAL,\n            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (event_id) REFERENCES events(event_id)\n        )\n        \"\"\"\n        \n        # Create draftkings_lineup_fighters table for lineup composition\n        draftkings_lineup_fighters_sql = \"\"\"\n        CREATE TABLE IF NOT EXISTS draftkings_lineup_fighters (\n            lineup_fighter_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            lineup_id INTEGER NOT NULL,\n            fighter_id INTEGER NOT NULL,\n            salary INTEGER NOT NULL,\n            projected_points REAL,\n            actual_points REAL,\n            position TEXT, -- 'Fighter' for DraftKings\n            FOREIGN KEY (lineup_id) REFERENCES draftkings_lineups(lineup_id),\n            FOREIGN KEY (fighter_id) REFERENCES fighters(fighter_id),\n            UNIQUE(lineup_id, fighter_id)\n        )\n        \"\"\"\n        \n        # Execute all table creation queries\n        tables = [\n            (\"fighters\", fighters_sql),\n            (\"weight_classes\", weight_classes_sql),\n            (\"events\", events_sql),\n            (\"fights\", fights_sql),\n            (\"fighter_stats\", fighter_stats_sql),\n            (\"betting_odds\", betting_odds_sql),\n            (\"data_extracts\", data_extracts_sql),\n            (\"prediction_models\", prediction_models_sql),\n            (\"predictions\", predictions_sql),\n            (\"draftkings_lineups\", draftkings_lineups_sql),\n            (\"draftkings_lineup_fighters\", draftkings_lineup_fighters_sql)\n        ]\n        \n        for table_name, sql in tables:\n            try:\n                self.execute_query(sql)\n                logger.info(f\"Created table: {table_name}\")\n            except sqlite3.Error as e:\n                logger.error(f\"Error creating table {table_name}: {e}\")\n                raise\n        \n        self.commit()\n        logger.info(\"All tables created successfully\")\n    \n    def create_indexes(self):\n        \"\"\"Create database indexes for optimal query performance.\"\"\"\n        \n        indexes = [\n            # Fighter indexes\n            \"CREATE INDEX IF NOT EXISTS idx_fighters_name ON fighters(name)\",\n            \n            # Event indexes\n            \"CREATE INDEX IF NOT EXISTS idx_events_date ON events(date)\",\n            \"CREATE INDEX IF NOT EXISTS idx_events_name ON events(name)\",\n            \n            # Fight indexes\n            \"CREATE INDEX IF NOT EXISTS idx_fights_event ON fights(event_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_fights_fighter1 ON fights(fighter1_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_fights_fighter2 ON fights(fighter2_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_fights_weight_class ON fights(weight_class_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_fights_outcome ON fights(outcome)\",\n            \n            # Fighter stats indexes\n            \"CREATE INDEX IF NOT EXISTS idx_fighter_stats_fight ON fighter_stats(fight_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_fighter_stats_fighter ON fighter_stats(fighter_id)\",\n            \n            # Betting odds indexes\n            \"CREATE INDEX IF NOT EXISTS idx_betting_odds_fight ON betting_odds(fight_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_betting_odds_favourite ON betting_odds(favourite_fighter_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_betting_odds_underdog ON betting_odds(underdog_fighter_id)\",\n            \n            # Prediction indexes\n            \"CREATE INDEX IF NOT EXISTS idx_predictions_model ON predictions(model_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_predictions_fight ON predictions(fight_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_predictions_date ON predictions(prediction_date)\",\n            \n            # DraftKings indexes\n            \"CREATE INDEX IF NOT EXISTS idx_draftkings_lineups_event ON draftkings_lineups(event_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_draftkings_lineup_fighters_lineup ON draftkings_lineup_fighters(lineup_id)\",\n            \"CREATE INDEX IF NOT EXISTS idx_draftkings_lineup_fighters_fighter ON draftkings_lineup_fighters(fighter_id)\"\n        ]\n        \n        for index_sql in indexes:\n            try:\n                self.execute_query(index_sql)\n                logger.info(f\"Created index: {index_sql.split('idx_')[1].split(' ')[0]}\")\n            except sqlite3.Error as e:\n                logger.error(f\"Error creating index: {e}\")\n                raise\n        \n        self.commit()\n        logger.info(\"All indexes created successfully\")\n    \n    def get_table_info(self, table_name: str) -> List[Dict]:\n        \"\"\"Get information about a table's structure.\"\"\"\n        cursor = self.execute_query(f\"PRAGMA table_info({table_name})\")\n        return [dict(row) for row in cursor.fetchall()]\n    \n    def get_all_tables(self) -> List[str]:\n        \"\"\"Get list of all tables in the database.\"\"\"\n        cursor = self.execute_query(\n            \"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'\"\n        )\n        return [row[0] for row in cursor.fetchall()]\n\n\nif __name__ == \"__main__\":\n    # Test the database schema creation\n    db = UFCDatabase(\"test_ufc.db\")\n    try:\n        db.create_tables()\n        db.create_indexes()\n        \n        # Print table information\n        tables = db.get_all_tables()\n        print(f\"Created {len(tables)} tables:\")\n        for table in tables:\n            print(f\"  - {table}\")\n            \n    except Exception as e:\n        logger.error(f\"Error during database setup: {e}\")\n    finally:\n        db.close()\n